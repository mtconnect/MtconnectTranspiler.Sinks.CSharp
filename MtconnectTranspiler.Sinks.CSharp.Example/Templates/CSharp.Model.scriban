using System;
using System.CodeDom.Compiler;
using MtconnectTranspiler.Sinks.CSharp.Contracts.Interfaces;

namespace {{ to_code_safe source.namespace }}
{
	[GeneratedCode("MtconnectTranspiler.Sinks.CSharp", "{{ version }}")]
	public static class MtconnectModel
	{
		public static IPackage[] Packages => new IPackage[] {
		{{~ for item in source.packages ~}}
{{~ item_code_name = item.name | to_code_safe | string.remove "." ~}}
			{{ item_code_name }}Package,
		{{~ end ~}}
		};

		public static IClass[] Classes => new IClass[] {
		{{~ for item in source.classes ~}}
{{~ item_class_code_name = item.name | to_code_safe | string.remove "." ~}}
			{{ item_class_code_name }},
		{{~ end ~}}
		};
	{{~ for item in source.packages ~}}
{{~ item_code_name = item.name | to_code_safe | string.remove "." ~}}
	private static {{ item_code_name }}Package _{{ item_code_name }}Package;
	public static {{ item_code_name }}Package {{ item_code_name }}Package => _{{ item_code_name}}Package ?? (_{{ item_code_name }}Package = new {{ item_code_name }}Package());
	{{~ end ~}}

	{{~ for item in source.classes ~}}
{{~ item_class_code_name = item.name | to_code_safe | string.remove "." ~}}
	private static {{ item_class_code_name }} _{{ item_class_code_name }};
{{~ if item.ReferenceId ~}}
	/// <summary>
	/// Id: {{ item.ReferenceId }}
	/// </summary>
{{~ end ~}}
	public static Package.{{ item_class_code_name }} {{ item_class_code_name }} => _{{ item_class_code_name }} ?? (_{{ item_class_code_name }} = new {{ item_class_code_name }}());
	{{~ end ~}}
	}
}