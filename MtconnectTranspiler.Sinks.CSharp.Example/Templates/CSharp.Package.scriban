{{~ code_name = source.name | to_code_safe | string.remove "." ~}}
using System;
using System.CodeDom.Compiler;
using MtconnectTranspiler.Sinks.CSharp.Contracts.Interfaces;
{{~ if source.packages.size > 0 || source.classes.size > 0 ~}}
using Package = {{ to_code_safe source.namespace }}.{{ code_name }};
{{~ end ~}}
{{~ namespaces = get_package_namespaces source ~}}
{{~ for item in namespaces ~}}
// using {{ to_code_safe item }};
{{~ end ~}}

namespace {{ to_code_safe source.namespace }} {
	[GeneratedCode("MtconnectTranspiler.Sinks.CSharp", "{{ version }}")]
	public class {{ code_name }}Package : IPackage {
		public IPackage[] Packages => new IPackage[] {
		{{~ for item in source.packages ~}}
{{~ item_code_name = item.name | to_code_safe | string.remove "." ~}}
			{{ item_code_name }}Package,
		{{~ end ~}}
		};

		public IClass[] Classes => new IClass[] {
		{{~ for item in source.classes ~}}
{{~ item_class_code_name = item.name | to_code_safe | string.remove "." ~}}
			{{ item_class_code_name }},
		{{~ end ~}}
		};
	{{~ for item in source.packages ~}}
{{~ item_code_name = item.name | to_code_safe | string.remove "." ~}}
	private Package.{{ item_code_name }}Package _{{ item_code_name }}Package;
	public Package.{{ item_code_name }}Package {{ item_code_name }}Package => _{{ item_code_name}}Package ?? (_{{ item_code_name }}Package = new Package.{{ item_code_name }}Package());
	{{~ end ~}}

	{{~ for item in source.classes ~}}
{{~ item_class_code_name = item.name | to_code_safe | string.remove "." ~}}
	private Package.{{ item_class_code_name }} _{{ item_class_code_name }};
{{~ if item.ReferenceId ~}}
	/// <summary>
	/// Id: {{ item.ReferenceId }}
	/// </summary>
{{~ end ~}}
	public Package.{{ item_class_code_name }} {{ item_class_code_name }} => _{{ item_class_code_name }} ?? (_{{ item_class_code_name }} = new Package.{{ item_class_code_name }}());
	{{~ end ~}}
	}
}