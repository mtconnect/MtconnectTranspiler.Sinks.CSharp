{{~ code_name = source.name | to_code_safe | string.remove "." ~}}
using System;
using System.CodeDom.Compiler;
using MtconnectTranspiler.Sinks.CSharp.Contracts.Interfaces;
{{~ namespaces = get_class_namespaces source ~}}
{{~ for item in namespaces ~}}
// using {{ to_code_safe item }};
{{~ end ~}}

namespace {{ to_code_safe source.namespace }}
{
	[GeneratedCode("MtconnectTranspiler.Sinks.CSharp", "{{ version }}")]
	public sealed class {{ code_name }} : IClass
	{
		/// <inheritdoc />
		public string ReferenceId => "{{ source.reference_id }}";
		
		/// <inheritdoc />
		public string Name => "{{ source.name }}";
		
		/// <inheritdoc />
		public string AccessModifier => "{{ source.access_modifier }}";
				
		/// <inheritdoc />
		public string Modifier => "{{ source.modifier }}";
				
		/// <inheritdoc />
		public string NormativeVersion => "{{ source.normative_version }}";
				
		/// <inheritdoc />
		public string DeprecatedVersion => "{{ source.deprecated_version }}";
		
		/// <inheritdoc />
		public string Generalization => "{{ source.generalization }}";

		{{~ if source.properties.size > 0 ~}}
		/// <inheritdoc />
		public {{ code_name }}Properties Properties { get; } = new {{ code_name }}Properties();
        IPropertyList IClass.Properties => Properties;
		public sealed class {{ code_name }}Properties : IPropertyList
		{
			/// <inheritdoc />
			public IProperty[] Properties => new IProperty[] {
			{{~ for item in source.properties ~}}
{{~ item_code_name = item.name | to_code_safe | string.remove "." ~}}
{{~
	if item.association
		item_suffix = "Part"
	else
		item_suffix = ""
	end
~}}
				{{ item_code_name }}{{ item_suffix }},
			{{~ end ~}}
			};
		{{~ for item in source.properties ~}}
		{{~ item_code_name = item.name | to_code_safe | string.remove "." ~}}
{{~ property_type_namespace = item.type | get_type_namespace | to_code_safe ~}}
		{{~
			if property_type_namespace
				item_type_name = item.type | to_pascal_case | to_code_safe | string.remove "."
			else
				item_type_name = item.type | to_code_safe | string.remove "."
			end
		~}}
		{{~
			if item.association
				item_suffix = "PartProperty"
			else
				item_suffix = "Property"
			end
		~}}
			/// <remarks>Original Name: {{ item.name }}</remarks>
			public {{ item_code_name }}{{ item_suffix }} {{ item_code_name }}{{ if item.association }}Part{{ end }} { get; } = new {{ item_code_name }}{{ item_suffix }}();
			public sealed class {{ item_code_name }}{{ item_suffix }} : IProperty
			{
				/// <summary>
				/// <inheritdoc />
				/// <remarks>
				/// <list type="bullet">
				/// <item>Original Type: {{ item.original_property_type }}</item>
				/// <item>Type: {{ item.type | to_pascal_case | to_code_safe }}</item>
				/// <item>Namespace: {{ property_type_namespace }}</item>
				/// </list>
				/// </remarks>
				/// </summary>
				public System.Type Type => typeof({{ if property_type_namespace }}{{ property_type_namespace }}.{{ end }}{{ item_type_name }});
				
				/// <inheritdoc />
				public string Name => "{{ item.name }}";
				
				/// <inheritdoc />
				public string AccessModifier => "{{ item.access_modifier }}";
				
				/// <inheritdoc />
				public string Modifier => "{{ item.modifier }}";
				
				/// <inheritdoc />
				public string NormativeVersion => "{{ item.normative_version }}";
				
				/// <inheritdoc />
				public string DeprecatedVersion => "{{ item.deprecated_version }}";
				
				/// <inheritdoc />
				public string Aggregation => "{{ item.aggregation }}";

				// Note: Extension.Extender
				/// <inheritdoc />
				public string Extension => "{{ item.extension }}";
				
				/// <inheritdoc />
				public string Association => "{{ item.association }}";

				// Note: DefaultValue.Name
				/// <inheritdoc />
				public string DefaultValue => "{{ item.default_value }}";

				// TODO: Add Summary
			}
		{{~ end ~}}
		};
		{{~ else ~}}
		public IPropertyList Properties => null;
		{{~ end ~}}

		{{~ if source.constraints.size > 0 ~}}
		# region Rules
	{{~ for constraint in source.constraints ~}}
		/// <summary>
		/// {{ constraint.name }}
		/// </summary>
		/// <remarks>Specification Language: <c>{{ constraint?.specification?.language ?? "Unspecified" }}</c></remarks>
		/*
		{{ constraint?.raw_script ?? "No Content" }}
		*/
	{{~ end ~}}
		# endregion
		{{~ end ~}}
	}
}