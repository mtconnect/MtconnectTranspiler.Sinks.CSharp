using System;
using System.CodeDom.Compiler;
using MtconnectTranspiler.Sinks.CSharp.Contracts.Interfaces;
using Package = Mtconnect.Fundamentals.MTConnectProtocol.RESTProtocol;

namespace Mtconnect.Fundamentals.MTConnectProtocol
{
	/// <summary>
	/// An <i>agent</i> <b>MUST</b> provide a REST API <i>API</i> supporting HTTP version 1.0 or greater.  This interface <b>MUST</b> support HTTP (RFC7230) and use URIs (RFC3986) to identify specific information requested from an <i>agent</i>.   The REST API adheres to the architectural principles of a stateless service to retrieve information associated with pieces of equipment. Additionally, the API is read-only and does not produce any side effects on the <i>agent</i> or the equipment. In REST state management, the client is responsible for recovery in case of an error or loss of connection.  ### HTTP Request  An <i>agent</i> <b>MUST</b> support the <c>HTTP</c> <c>GET</c> verb, all other verbs are optional. See IETF RFC 7230 for a complete description of the HTTP request structure.  The HTTP uses Uniform Resource Identifiers (URI) as outlined in IETF RFC 3986 as the <i>request-target</i>s. IETF RFC 7230 specifies the http URI scheme for the <i>request-target</i>s as follows:  1. <c>protocol</c>: The protocol used for the request. Must be <c>http</c> or <c>https</c>.  2. <c>authority</c>: The network domain or address of the agent with an optional port.  3. <c>path</c>: A Hierarchical Identifier following a slash (<c>/</c>) and before the optional question-mark (<c>?</c>). The <c>path</c> separates segments by a slash (<c>/</c>).  4. <c>query</c>: The portion of the HTTP request following the question-mark (<c>?</c>). The query portion of the HTTP request is composed of key-value pairs, <c><key>=<value></c> separated by an ampersand (<c>&</c>).  #### <c>path</c> Portion of an HTTP Request  The <c>path</c> portion of the <i>request-target</i>s has the following segments:  * <c>device-name</c> or <c>uuid</c>: optional <c>name</c> or <c>uuid</c> of the <see cref="Device">Device</see> * <c>request</c>: request, must be one of the following: (also see <see cref="Operations for Agent">Operations for Agent</see>)   - {{operation(REST Protocol::Agent::probe)}}   - {{operation(REST Protocol::Agent::current)}}   - {{operation(REST Protocol::Agent::sample)}}   - {{operation(REST Protocol::Agent::asset)}}  or <c>assets</c>     - {{operation(REST Protocol::Agent::asset)}} request has additional optional segment <c><asset ids></c>    If <c>name</c> or <c>uuid</c> segement are not specified in the <i>HTTP Request</i>, an <i>agent</i> <b>MUST</b> return information for all pieces of equipment. The following sections will   Examples:     * <c>http://localhost:5000/my_device/probe</c>        The request only provides information about <c>my_device</c>.    * <c>http://localhost:5000/probe</c>    The request provides information for all devices.   The following section specifies the details for each request.  ### MTConnect REST API  An <i>agent</i> <b>MUST</b> support <i>probe request</i>s, <i>current request</i>s, <i>sample request</i>s, and <i>asset request</i>s.  See the operations of the <see cref="REST Protocol::Agent">REST Protocol::Agent</see> for details regarding the <i>request</i>s.  ### HTTP Errors  When an <i>agent</i> receives an <i>HTTP Request</i> that is incorrectly formatted or is not supported by the <i>agent</i>, the <i>agent</i> <b>MUST</b> publish an <i>HTTP Error Message</i> which includes a specific status code from the tables above indicating that the <i>request</i> could not be handled by the <i>agent</i>.  Also, if the <i>agent</i> experiences an internal error and is unable to provide the requested <i>response document</i>, it <b>MUST</b> publish an <i>HTTP Error Message</i> that includes a specific status code from the table above.  When an <i>agent</i> encounters an error in interpreting or responding to an <i>HTTP Request</i>, the <i>agent</i> <b>MUST</b> also publish an <i>MTConnectErrors Response Document</i> that provides additional details about the error.  See <see cref="Error Information Model">Error Information Model</see> for details on the <i>MTConnectErrors Response Document</i>.    #### Streaming Data  HTTP <i>data streaming</i> is a method for an <i>agent</i> to provide a continuous stream of <i>observation</i>s in response to a single <i>request</i> using a <i>publish and subscribe</i> communication pattern.  When an <i>HTTP Request</i> includes an <c>interval</c> parameter, an <i>agent</i> <b>MUST</b> provide data with a minimum delay in milliseconds between the end of one data transmission and the beginning of the next.  A value of zero (0) for the <c>interval</c> parameter indicates that the <i>agent</i> should deliver data at the highest rate possible and is only relevant for <i>sample request</i>s .  The format of the response <b>MUST</b> use an <c>x-multipart-replace</c> encoded message with each section separated by MIME boundaries.  Each section <b>MUST</b> contain an entire <i>MTConnectStreams Response Document</i>.   When streaming for a <i>current request</i>, the <i>agent</i> produces an <i>MTConnectStreams Response Document</i> with the most current <i>observation</i>s every <c>interval</c> milliseconds.  When streaming for a <i>sample request</i>, if there are no available <i>observation</i>s after the <c>interval</c> time elapsed, the <i>agent</i> <b>MUST</b> wait for either the <c>heartbeat</c> time to elapse or an <i>observation</i> arrives. If the <c>heartbeat</c> time elapses and no <i>observation</i>s arrive, then an empty <i>MTConnectStreams Response Document</i> <b>MUST</b> be sent.  > Note: For more information on MIME, see IETF RFC 1521 and RFC 822.  An example of the format for an <i>HTTP Request</i> that  includes an <c>interval</c> parameter is:  ~~~~ http://localhost:5000/sample?interval=1000 ~~~~ {: caption="Example for HTTP Request with interval parameter" label="example-for-http-request-with-interval-parameter"}  HTTP Response Header:  ~~~~ HTTP/1.1 200 OK Connection: close Date: Sat, 13 Mar 2010 08:33:37 UTC Status: 200 OK Content-Disposition: inline X-Runtime: 144ms Content-Type: multipart/x-mixed-replace;boundary= a8e12eced4fb871ac096a99bf9728425 Transfer-Encoding: chunked ~~~~ {: caption="HTTP Response header" label="http-response-header"}  Lines 1-9 in {{lst(http-response-header)}} represent a standard header for a MIME <c>multipart/x-mixed-replace</c> message.  The boundary is a separator for each section of the stream. Lines 7-8 indicate this is a multipart MIME message and the boundary between sections.   With streaming protocols, the <c>Content-length</c> <b>MUST</b> be omitted and <c>Transfer-Encoding</c> <b>MUST</b> be set to <c>chunked</c> (line 9). See IETF RFC 7230 for a full description of the HTTP protocol and chunked encoding.  ~~~~ --a8e12eced4fb871ac096a99bf9728425 Content-type: text/xml Content-length: 887  <?xml version="1.0" ecoding="UTF-8"?> <MTConnectStreams ...>... ~~~~ {: caption="HTTP Response header 2" label="http-response-header-2" start="last"}  Each section of the document begins with a boundary preceded by two hyphens (<c>--</c>). The <c>Content-type</c> and <c>Content-length</c> header fields <b>MUST</b> be provided for each section and <b>MUST</b> be followed by <c><CR><LF><CR><LF></c> (ASCII code for <c><CR></c> is 13 and <c><LF></c> 10) before the <i>XML</i> document. The header and the <c><CR><LF><CR><LF></c> <b>MUST NOT</b> be included in the computation of the content length.  An <i>agent</i> MUST continue to stream results until the client closes the connection. The <i>agent</i> MUST NOT stop streaming for any reason other than the following:  * <i>agent</i> process stops * The client application stops receiving data  ##### Heartbeat  When <i>streaming data</i> is requested from a <i>sample request</i>, an <i>agent</i> <b>MUST</b> support a <i>heartbeat</i> to indicate to a client application that the HTTP connection is still viable during times when there is no new data available to be published.  The <i>heartbeat</i> is indicated by an <i>agent</i> by sending an MTConnect <i>response document</i> with an empty <see cref="Steams">Steams</see> entity (See <see cref="Observation Information Model">Observation Information Model</see> for more details on <see cref="Streams">Streams</see>) to the client software application.  The <i>heartbeat</i> <b>MUST</b> occur on a periodic basis given by the optional <c>heartbeat</c> query parameter and <b>MUST</b> default to 10 seconds.  An <i>agent</i> <b>MUST</b> maintain a separate <i>heartbeat</i> for each client application for which the <i>agent</i> is responding to a <i>data streaming</i> <i>request</i>.  An <i>agent</i> <b>MUST</b> begin calculating the interval for the time-period of the <i>heartbeat</i> for each client application immediately after a <i>response document</i> is published to that specific client application.  The <i>heartbeat</i> remains in effect for each client software application until the <i>data streaming</i> <i>request</i> is terminated by either the <i>agent</i> or the client application.  #### References  A <see cref="Component">Component</see> <b>MAY</b> include a set of <see cref="Reference">Reference</see> entities of the following types that <b>MAY</b> alter the content of the <i>MTConnectStreams Response Document</i>s published in response to a <i>current request</i> or a <i>sample request</i> as specified:  * A <i>Component</i> reference (<see cref="ComponentRef">ComponentRef</see>) modifies the set of <i>Observation</i>s, limited by a path query parameter of a <i>current request</i> or <i>sample request</i>, to include the <i>Observation</i>s associated with the entity whose value for its <c>id</c> attribute matches the value provided for the <c>idRef</c> attribute of the <see cref="ComponentRef">ComponentRef</see> element. Additionally, <i>Observation</i>s defined for any <i>lower level</i> entity(s) associated with the identified entities <b>MUST</b> also be returned. The result is equivalent to appending <c>//[@id=<"idRef">]</c> to the path query parameters of the <i>current request</i> or <i>sample request</i>. See <see cref="Agent">Agent</see> for more details on path queries.  * A <i>DataItem</i> reference (<see cref="DataItemRef">DataItemRef</see>) modifies the set of resulting <i>Observation</i>s, limited by a path query parameter of a <i>current request</i> or <i>sample request</i>, to include the <i>Observation</i>s whose value for its <c>id</c> attribute matches the value provided for the <c>idRef</c> attribute of the <see cref="DataItemRef">DataItemRef</see> element. The result is equivalent to appending <c>//[@id=<"idRef">]</c> to the path query parameters of the <i>current request</i> or <i>sample request</i>. See <see cref="Agent">Agent</see> for more details on path queries. 
	/// <br/>Visit <seealso href="https://model.mtconnect.org/#Package___19_0_4_45f01b9_1637706615628_274120_5004">model.mtconnect.org</seealso> for more information.
	/// </summary>
	[GeneratedCode("MtconnectTranspiler.Sinks.CSharp", "2.3.0.0")]
	public class RESTProtocolPackage : IPackage
	{
		/// <inheritdoc />
		public string ReferenceId => "_19_0_4_45f01b9_1637706615628_274120_5004";
		
		/// <inheritdoc />
		public string Name => "REST Protocol";

		/// <inheritdoc />
		public string Summary => @"/// An <i>agent</i> <b>MUST</b> provide a REST API <i>API</i> supporting HTTP version 1.0 or greater.  This interface <b>MUST</b> support HTTP (RFC7230) and use URIs (RFC3986) to identify specific information requested from an <i>agent</i>.   The REST API adheres to the architectural principles of a stateless service to retrieve information associated with pieces of equipment. Additionally, the API is read-only and does not produce any side effects on the <i>agent</i> or the equipment. In REST state management, the client is responsible for recovery in case of an error or loss of connection.  ### HTTP Request  An <i>agent</i> <b>MUST</b> support the <c>HTTP</c> <c>GET</c> verb, all other verbs are optional. See IETF RFC 7230 for a complete description of the HTTP request structure.  The HTTP uses Uniform Resource Identifiers (URI) as outlined in IETF RFC 3986 as the <i>request-target</i>s. IETF RFC 7230 specifies the http URI scheme for the <i>request-target</i>s as follows:  1. <c>protocol</c>: The protocol used for the request. Must be <c>http</c> or <c>https</c>.  2. <c>authority</c>: The network domain or address of the agent with an optional port.  3. <c>path</c>: A Hierarchical Identifier following a slash (<c>/</c>) and before the optional question-mark (<c>?</c>). The <c>path</c> separates segments by a slash (<c>/</c>).  4. <c>query</c>: The portion of the HTTP request following the question-mark (<c>?</c>). The query portion of the HTTP request is composed of key-value pairs, <c><key>=<value></c> separated by an ampersand (<c>&</c>).  #### <c>path</c> Portion of an HTTP Request  The <c>path</c> portion of the <i>request-target</i>s has the following segments:  * <c>device-name</c> or <c>uuid</c>: optional <c>name</c> or <c>uuid</c> of the <see cref=""Device"">Device</see> * <c>request</c>: request, must be one of the following: (also see <see cref=""Operations for Agent"">Operations for Agent</see>)   - {{operation(REST Protocol::Agent::probe)}}   - {{operation(REST Protocol::Agent::current)}}   - {{operation(REST Protocol::Agent::sample)}}   - {{operation(REST Protocol::Agent::asset)}}  or <c>assets</c>     - {{operation(REST Protocol::Agent::asset)}} request has additional optional segment <c><asset ids></c>    If <c>name</c> or <c>uuid</c> segement are not specified in the <i>HTTP Request</i>, an <i>agent</i> <b>MUST</b> return information for all pieces of equipment. The following sections will   Examples:     * <c>http://localhost:5000/my_device/probe</c>        The request only provides information about <c>my_device</c>.    * <c>http://localhost:5000/probe</c>    The request provides information for all devices.   The following section specifies the details for each request.  ### MTConnect REST API  An <i>agent</i> <b>MUST</b> support <i>probe request</i>s, <i>current request</i>s, <i>sample request</i>s, and <i>asset request</i>s.  See the operations of the <see cref=""REST Protocol::Agent"">REST Protocol::Agent</see> for details regarding the <i>request</i>s.  ### HTTP Errors  When an <i>agent</i> receives an <i>HTTP Request</i> that is incorrectly formatted or is not supported by the <i>agent</i>, the <i>agent</i> <b>MUST</b> publish an <i>HTTP Error Message</i> which includes a specific status code from the tables above indicating that the <i>request</i> could not be handled by the <i>agent</i>.  Also, if the <i>agent</i> experiences an internal error and is unable to provide the requested <i>response document</i>, it <b>MUST</b> publish an <i>HTTP Error Message</i> that includes a specific status code from the table above.  When an <i>agent</i> encounters an error in interpreting or responding to an <i>HTTP Request</i>, the <i>agent</i> <b>MUST</b> also publish an <i>MTConnectErrors Response Document</i> that provides additional details about the error.  See <see cref=""Error Information Model"">Error Information Model</see> for details on the <i>MTConnectErrors Response Document</i>.    #### Streaming Data  HTTP <i>data streaming</i> is a method for an <i>agent</i> to provide a continuous stream of <i>observation</i>s in response to a single <i>request</i> using a <i>publish and subscribe</i> communication pattern.  When an <i>HTTP Request</i> includes an <c>interval</c> parameter, an <i>agent</i> <b>MUST</b> provide data with a minimum delay in milliseconds between the end of one data transmission and the beginning of the next.  A value of zero (0) for the <c>interval</c> parameter indicates that the <i>agent</i> should deliver data at the highest rate possible and is only relevant for <i>sample request</i>s .  The format of the response <b>MUST</b> use an <c>x-multipart-replace</c> encoded message with each section separated by MIME boundaries.  Each section <b>MUST</b> contain an entire <i>MTConnectStreams Response Document</i>.   When streaming for a <i>current request</i>, the <i>agent</i> produces an <i>MTConnectStreams Response Document</i> with the most current <i>observation</i>s every <c>interval</c> milliseconds.  When streaming for a <i>sample request</i>, if there are no available <i>observation</i>s after the <c>interval</c> time elapsed, the <i>agent</i> <b>MUST</b> wait for either the <c>heartbeat</c> time to elapse or an <i>observation</i> arrives. If the <c>heartbeat</c> time elapses and no <i>observation</i>s arrive, then an empty <i>MTConnectStreams Response Document</i> <b>MUST</b> be sent.  > Note: For more information on MIME, see IETF RFC 1521 and RFC 822.  An example of the format for an <i>HTTP Request</i> that  includes an <c>interval</c> parameter is:  ~~~~ http://localhost:5000/sample?interval=1000 ~~~~ {: caption=""Example for HTTP Request with interval parameter"" label=""example-for-http-request-with-interval-parameter""}  HTTP Response Header:  ~~~~ HTTP/1.1 200 OK Connection: close Date: Sat, 13 Mar 2010 08:33:37 UTC Status: 200 OK Content-Disposition: inline X-Runtime: 144ms Content-Type: multipart/x-mixed-replace;boundary= a8e12eced4fb871ac096a99bf9728425 Transfer-Encoding: chunked ~~~~ {: caption=""HTTP Response header"" label=""http-response-header""}  Lines 1-9 in {{lst(http-response-header)}} represent a standard header for a MIME <c>multipart/x-mixed-replace</c> message.  The boundary is a separator for each section of the stream. Lines 7-8 indicate this is a multipart MIME message and the boundary between sections.   With streaming protocols, the <c>Content-length</c> <b>MUST</b> be omitted and <c>Transfer-Encoding</c> <b>MUST</b> be set to <c>chunked</c> (line 9). See IETF RFC 7230 for a full description of the HTTP protocol and chunked encoding.  ~~~~ --a8e12eced4fb871ac096a99bf9728425 Content-type: text/xml Content-length: 887  <?xml version=""1.0"" ecoding=""UTF-8""?> <MTConnectStreams ...>... ~~~~ {: caption=""HTTP Response header 2"" label=""http-response-header-2"" start=""last""}  Each section of the document begins with a boundary preceded by two hyphens (<c>--</c>). The <c>Content-type</c> and <c>Content-length</c> header fields <b>MUST</b> be provided for each section and <b>MUST</b> be followed by <c><CR><LF><CR><LF></c> (ASCII code for <c><CR></c> is 13 and <c><LF></c> 10) before the <i>XML</i> document. The header and the <c><CR><LF><CR><LF></c> <b>MUST NOT</b> be included in the computation of the content length.  An <i>agent</i> MUST continue to stream results until the client closes the connection. The <i>agent</i> MUST NOT stop streaming for any reason other than the following:  * <i>agent</i> process stops * The client application stops receiving data  ##### Heartbeat  When <i>streaming data</i> is requested from a <i>sample request</i>, an <i>agent</i> <b>MUST</b> support a <i>heartbeat</i> to indicate to a client application that the HTTP connection is still viable during times when there is no new data available to be published.  The <i>heartbeat</i> is indicated by an <i>agent</i> by sending an MTConnect <i>response document</i> with an empty <see cref=""Steams"">Steams</see> entity (See <see cref=""Observation Information Model"">Observation Information Model</see> for more details on <see cref=""Streams"">Streams</see>) to the client software application.  The <i>heartbeat</i> <b>MUST</b> occur on a periodic basis given by the optional <c>heartbeat</c> query parameter and <b>MUST</b> default to 10 seconds.  An <i>agent</i> <b>MUST</b> maintain a separate <i>heartbeat</i> for each client application for which the <i>agent</i> is responding to a <i>data streaming</i> <i>request</i>.  An <i>agent</i> <b>MUST</b> begin calculating the interval for the time-period of the <i>heartbeat</i> for each client application immediately after a <i>response document</i> is published to that specific client application.  The <i>heartbeat</i> remains in effect for each client software application until the <i>data streaming</i> <i>request</i> is terminated by either the <i>agent</i> or the client application.  #### References  A <see cref=""Component"">Component</see> <b>MAY</b> include a set of <see cref=""Reference"">Reference</see> entities of the following types that <b>MAY</b> alter the content of the <i>MTConnectStreams Response Document</i>s published in response to a <i>current request</i> or a <i>sample request</i> as specified:  * A <i>Component</i> reference (<see cref=""ComponentRef"">ComponentRef</see>) modifies the set of <i>Observation</i>s, limited by a path query parameter of a <i>current request</i> or <i>sample request</i>, to include the <i>Observation</i>s associated with the entity whose value for its <c>id</c> attribute matches the value provided for the <c>idRef</c> attribute of the <see cref=""ComponentRef"">ComponentRef</see> element. Additionally, <i>Observation</i>s defined for any <i>lower level</i> entity(s) associated with the identified entities <b>MUST</b> also be returned. The result is equivalent to appending <c>//[@id=<""idRef"">]</c> to the path query parameters of the <i>current request</i> or <i>sample request</i>. See <see cref=""Agent"">Agent</see> for more details on path queries.  * A <i>DataItem</i> reference (<see cref=""DataItemRef"">DataItemRef</see>) modifies the set of resulting <i>Observation</i>s, limited by a path query parameter of a <i>current request</i> or <i>sample request</i>, to include the <i>Observation</i>s whose value for its <c>id</c> attribute matches the value provided for the <c>idRef</c> attribute of the <see cref=""DataItemRef"">DataItemRef</see> element. The result is equivalent to appending <c>//[@id=<""idRef"">]</c> to the path query parameters of the <i>current request</i> or <i>sample request</i>. See <see cref=""Agent"">Agent</see> for more details on path queries. ";

		/// <inheritdoc />
		public IPackage[] Packages => new IPackage[] {
		};
		
		/// <inheritdoc />
		public IClass[] Classes => new IClass[] {
			AgentClass,
		};
		#region Packages
	#endregion

	#region Classes
	private Package.AgentClass _AgentClass;
	/// <summary>
	/// <inheritdoc cref="Package.AgentClass" path="/summary" />
	/// </summary>
	public Package.AgentClass AgentClass => _AgentClass ?? (_AgentClass = new Package.AgentClass());

	#endregion
	}
}